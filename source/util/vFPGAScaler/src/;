#define _GNU_SOURCE 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <thread>
#include <queue>
#include <unistd.h>
#include <assert.h>

#include "queuemanager.h"
#include "serviceregistry.h"
#include "resourceregistry.h"
#include "aclutil.h"
#include "mmdapp.h"

#undef _GNU_SOURCE

#include "aocl_mmd.h"

#if defined(WINDOWS)
#  include "wdc_lib_wrapper.h"
#endif   // WINDOWS

#if defined(LINUX)
#  include "../../../../linux64/driver/hw_pcie_constants.h"
#endif   // LINU

/*
*  Simulation Parameters
*/
#define TOT_REQUEST 10
#define AVG_ARRIV_RATE 10
#define TIME_WINDOW 5

/*
*  Shared global variables (or objects)
*/
static std::queue<QEntry*> TaskQ;
static std::map<int, std::queue<QEntry*>> PRQs; // <device ID, PRQ>
static std::map<int, std::queue<QEntry*>> PRRQs; // <global prr ID, PRRQ>
static ResourceRegistry rsc_reg = ResourceRegistry();
static ServiceRegistry srv_reg = ServiceRegistry();
static TaskQueueManager TaskQ_mgr(TaskQ, PRQs, PRRQs, rsc_reg, srv_reg, 0, TIME_WINDOW); 
static std::map<int, PRQueueManager> PRQ_mgrs; // <device Id, PRQ_mgr>
static std::map<int, PRRQueueManager> PRRQ_mgrs; // <global prr Id, PRRQ_mgr>
static ResourceScaler scaler(rsc_reg, srv_reg, PRRQ_mgrs);
static int num_devices = 0;


/*
*  Utility Functions in main
*/
void Init();
void RunDaemon();
void RunSim();
int* zipf_sequence(int tot_services, int tot_requests);


/*
*  Main Function
*/
int main (int argc, char* argv[]){

  Init();
  RunDaemon();
  RunSim(); 

  return 0;

}

void Init(){

  /*
  *  Search all devices on this node
  */
  char boards_name[MMD_STRING_RETURN_SIZE];
  aocl_mmd_get_offline_info(AOCL_MMD_BOARD_NAMES, sizeof(boards_name), boards_name, NULL);

  char* dev_name;
  for(dev_name = strtok(boards_name, ";"); dev_name != NULL ; dev_name = strtok(NULL, ";")){
    /*
    *   Create new device entry and Add to the resource registry
    */ 
    Device device;

    // set device name, e.g., a10_vfpga0, a10_ref0 
    device.dev_name = dev_name;
  
    // set device handle used by mmd library
    int dev_handle = aocl_mmd_open(dev_name);
    device.dev_handle = dev_handle;

    // set board name, e.g., Altera Arria 10 GX 
    char board_name[MMD_STRING_RETURN_SIZE];
    aocl_mmd_get_info(dev_handle, AOCL_MMD_BOARD_NAME, sizeof(board_name), board_name, NULL);
    device.board_name = board_name;

    // set number of partitions
    int num_partitions;
    aocl_mmd_get_info(dev_handle, AOCL_MMD_NUM_PARTITIONS, sizeof(num_partitions), &num_partitions, NULL);
    device.num_prrs = num_partitions;

    // set init status of PRRs
    device.prrs = new Partition[num_partitions];
    for(int i=0; i<num_partitions; i++){
      device.prrs[i].id = i;
    }

    rsc_reg.registerDevice(device);

    num_devices++;
  }

  rsc_reg.print();

  /*
  *  Init queues and queue managers of this system
  */
  int prr_glob_id ;
  for( int i=0; i<num_devices; i++){
    PRQs.insert(std::pair<int, std::queue<QEntry*>>(i, std::queue<QEntry*>()));
    PRQ_mgrs.insert(std::pair<int, PRQueueManager>(i, PRQueueManager(PRQs[i])));
    for( int j=0; j<rsc_reg.getEntry(i).num_prrs; j++){
      prr_glob_id = i ? i*rsc_reg.getEntry(i-1).num_prrs + j : j ;
      PRRQs.insert(std::pair<int, std::queue<QEntry*>>(prr_glob_id, std::queue<QEntry*>()));
      PRRQ_mgrs.insert(std::pair<int, PRRQueueManager>(prr_glob_id, PRRQueueManager(PRRQs[prr_glob_id])));
    }
  }

 
}

void RunDaemon(){

//  std::thread t_task_q = 
//  std::vector<std::thread> t_pr_q;
//  std::vector<std::thread> t_prr_q;
//  std::thread t_rsc_mgr = 

}

void RunSim(){

  /*
  *  Simulation Init
  *  1) registerServices
  *  2) create application objects
  *  3) initialize servie rank 
  *  4) generate service request sequences
  *  5) generate request according to request sequences
  */

  // registerService  
  int MatMul_id = srv_reg.registerService("MatMul", 4, "../bin/pr_bin/MatMul/fpga.bin", 0,
                                                       "../bin/pr_bin/MatMul/fpga_1.bin", 1,
                                                       "../bin/pr_bin/MatMul/fpga_2.bin", 2,
                                                       "../bin/pr_bin/MatMul/fpga_3.bin", 3); 
  assert(MatMul_id >=0 && "Error: registerService failure\n");
  int Sobel_id = srv_reg.registerService("Sobel", 4, "../bin/pr_bin/Sobel/fpga.bin", 0,
                                                      "../bin/pr_bin/Sobel/fpga_1.bin", 1,
                                                      "../bin/pr_bin/Sobel/fpga_2.bin", 2,
                                                      "../bin/pr_bin/Sobel/fpga_3.bin", 3);
  assert(Sobel_id >=0 && "Error: registerService failure\n");
  int VecAdd_id = srv_reg.registerService("VecAdd", 4, "../bin/pr_bin/VecAdd/fpga.bin", 0,
                                                       "../bin/pr_bin/VecAdd/fpga_1.bin", 1,
                                                       "../bin/pr_bin/VecAdd/fpga_2.bin", 2,
                                                       "../bin/pr_bin/VecAdd/fpga_3.bin", 3);
  assert(VecAdd_id >=0 && "Error: registerService failure\n");

  // create application objects
  MMDApp app_MatMul = MMDApp(srv_reg, rsc_reg, "MatMul", MatMul_id);
  MMDApp app_VecAdd = MMDApp(srv_reg, rsc_reg, "VecAdd", VecAdd_id);
  MMDApp app_Sobel = MMDApp(srv_reg, rsc_reg, "Sobel", Sobel_id);
  int tot_services = 3;

  // service rank init
  std::map<int, MMDApp*> rank_app_map;
  rank_app_map.insert(std::pair<int, MMDApp*>(0, &app_Sobel));
  rank_app_map.insert(std::pair<int, MMDApp*>(1, &app_VecAdd));
  rank_app_map.insert(std::pair<int, MMDApp*>(2, &app_MatMul));

  // generate service request sequence
  // zipf_sequence return sequence of service's rank 
  int* req_seq = zipf_sequence(tot_services, TOT_REQUEST);
  
  // generate synthesized request pattern
  std::vector<std::thread> t_requests;
  t_requests.reserve(TOT_REQUEST);
  for (int i=0; i<TOT_REQUEST; i++){
    double interval = 1.0 / (float) AVG_ARRIV_RATE;
    sleep(interval);

    t_requests.push_back(std::thread(&MMDApp::run, rank_app_map[req_seq[i]])); 
  }  

  for( auto &t : t_requests ){
    t.join();
  }

}

int* zipf_sequence(int tot_services, int tot_requests){

  int* seq = new int[tot_requests];
  float* srv_popularity = new float[tot_services]; 
  
  // calculate number of requests of each services
  // accroding to zipf's distribution
  float denom = 0;
  for (int i=1; i<=tot_services; i++){
    denom += 1.0 / i;
  }
  for (int i=tot_services; i>0; i--){
    srv_popularity[tot_services-i] = (1.0 / (float) i) / denom; // rank N, rank N-1, ..., rank 1's # of requests
  }

  // generate requests sequence 
  for (int i=0; i<tot_requests; i++){
    float r = rand() / (float) RAND_MAX ; // {0~1}
    float cum =0;
    for (int j=0; j<tot_services; j++){
      cum += srv_popularity[j];
      if( r <= cum ){
        seq[i] =  (tot_services - j -1);
	break;
      }
    }  
  }

  return seq;
}
